{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to K-Villain FastAPI Allauth!","text":"<p>K-villain FastAPI Allauth is based on SQLAlchemy, and designed to be cutomizable. It enables you to bring various oauth social login to your services.</p> <p> </p> <p>Docs: https://k-villain.github.io/viilain-sanghyeop</p> <p>Github: https://github.com/K-villain/viilain-sanghyeop</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p> \u00a0Extensible base user model</p> </li> <li> <p> \u00a0SQLAlchemy ORM based </p> </li> <li> <p> \u00a0Cutomiazable User table </p> </li> <li> <p> \u00a0 Ready-to-use social oauth login flow</p> </li> </ul>"},{"location":"#contributors","title":"Contributors","text":"sangham\ud83d\udea7 choisaywhy\ud83d\udea7"},{"location":"installation/","title":"Getting started","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>First of all, you need to install fastapi-allauth.</p> <pre><code>pip install fastapi-allauth\n</code></pre>"},{"location":"installation/#minimum-example","title":"Minimum Example","text":"<p><code>Villain Fastapi Allauth</code> provides several ready-to-use clients.</p> <p>Here is an example of google oauth to start with.</p> app/models.pyapp/main.py <pre><code>from fastapi_allauth.model.BaseUser import BaseUser, Base\nclass CustomUser(BaseUser):\n# defalut payload only has an ID\n# update your payload\npayload = {\n\"custom\": \"custom\"\n... \n}\n# If additional columns are needed, add them.\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom fastapi import APIRouter\nfrom fastapi_allauth.oauth import GoogleOauth\nfrom fastapi_allauth import AllauthManager\nfrom db import engine, SessionLocal\nfrom models import CustomUser, Base\nBase.metadata.create_all(bind=engine)\n...\nJWT_SECRET = 'your secret'\nallauthManager = AllauthManager(db=get_db(),\nuser=CustomUser, secret=JWT_SECRET, lifetime_second=3600)\ngoogleOauth = GoogleOauth(\nprovider=\"GOOGLE\",\nclient_id=\"your client\",\nclient_secret=\"your secret\",\nredirect_uri=\"http://localhost:8000/google/callback\",\nscope=[\"openid\", \"email\", \"profile\"]\n)\napp.include_router(allauthManager.get_oauth_router(\ngoogleOauth), prefix=\"/google\", tags=[\"google\"])\n</code></pre> <p></p>"},{"location":"license/","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"configuration/allauth-manager/","title":"Allauth manager","text":""},{"location":"configuration/allauth-manager/#params","title":"Params","text":"<p><code>allauth_manager</code> takes in the following parameters in its constructor.</p> <ul> <li><code>db</code>: a SQLAlchemy session object that is used for interacting with a database.</li> <li><code>user</code>: a user object that inherits <code>BaseUser</code>.</li> <li><code>secret</code>: a string that is used to encrypt and decrypt JSON web tokens (JWT).</li> <li><code>lifetime_second</code>: an integer representing the lifetime in seconds of a token.</li> </ul>"},{"location":"configuration/allauth-manager/#methods","title":"Methods","text":"<p><code>allauth_manager</code> provides the following methods.</p> <ul> <li> <p><code>get_oauth_router</code>: a method that returns an instance of FastAPI's APIRouter with two endpoints, <code>/authorize</code> and <code>/callback</code>, for handling OAuth authorization and callback processes, respectively.</p> <ul> <li> <p>/authorize</p> <ul> <li> <p>Description: This endpoint is returns a JSON response containing authorization url</p> </li> <li> <p>Headers:</p> <ul> <li>Content-Type: <code>application/json</code></li> </ul> </li> <li> <p>Request Body:</p> <ul> <li>scope: string</li> </ul> </li> <li> <p>Response Body:</p> <ul> <li>url: string (required)</li> </ul> </li> <li> <p>Response Status Codes:</p> <ul> <li>200 OK: return url was successful </li> <li>400 Bad Request: Required parameters are missing or invalid.</li> </ul> </li> <li> <p>Example Request:</p> <pre><code>bashCopy codePOST /authorize\nContent-Type: application/json\n\n{\n    \"scope\": \"email, birth\"\n}\n</code></pre> </li> </ul> </li> <li> <p>/callback</p> <ul> <li> <p>Description: This endpoint is used for logging into the system. It returns a JSON response containing access and refresh tokens.</p> </li> <li> <p>Headers:</p> </li> <li> <p>Content-Type: <code>application/json</code></p> </li> </ul> <p>Request Body:</p> <pre><code>- code: string (required)\n- state: string (required)\n</code></pre> <p>Response Body:</p> <pre><code>- access_token: string (required)\n- refresh_token: string (required)\n</code></pre> <p>Response Status Codes:</p> <pre><code>- 200 OK: Login was successful and access and refresh tokens are returned in the response.\n- 400 Bad Request: Required parameters are missing or invalid.\n- 401 Unauthorized: Incorrect email or password.\n</code></pre> <p>Example Request:</p> <pre><code>```\nbashCopy codePOST /login\nContent-Type: application/json\n\n{\n    \"code\": \"code\",\n    \"state\": \"state\"\n}\n```\n</code></pre> <p>Example Response:</p> <pre><code>```\ncssCopy codeHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1ODk5MTk0MDUsImlhdCI6MTU4OTkxODkwNSwiZW1haWwiOiJleGFtcGxlQGdtYWlsLmNvbSJ9.iQ21xFyE0NlNlZ6Wxdu8UOhN1rLjKlFcNbLKj0vL-4I\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1OTA1MjQyMDUsImlhdCI6MTU4OTkxODkwNSwiZW1haWwiOiJleGFtcGxlQGdtYWlsLmNvbSJ9.NxL-yaCnS1SzfIgWU6BQik6DJj9PiYbZ6fmgW8pv068\",\n    \"expires_in\": 86400\n}\n```\n</code></pre> </li> </ul> </li> <li> <p><code>login_required</code>: a decorator that checks if a user is logged in. If the user is not logged in or the token is invalid, it raises a <code>HTTPException</code> with status code 401.</p> </li> </ul>"},{"location":"configuration/allauth-manager/#code","title":"Code","text":"<pre><code>from typing import Optional\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, HTTPException\nfrom fastapi.responses import RedirectResponse\nfrom oauth.BaseOauth import BaseOauth\nfrom auth import login, register, AuthHandler\nfrom model import BaseUser\nfrom functools import wraps\nclass AllauthManager:\ndb: Session\nuser: BaseUser\nsecret: str\nlifetime_second: int = 3600\ndef __init__(self, db, user, secret, lifetime_second) -&gt; None:\nself.db = db\nself.user = user\nself.secret = secret\nself.lifetime_second = lifetime_second\ndef get_oauth_router(self, oauth: BaseOauth) -&gt; APIRouter:\nrouter = APIRouter()\n@router.get(\"/authorize\")\nasync def authorize(scope: Optional[str] = None):\nurl = await oauth.get_authorization_url(scope=scope)\nreturn {\"url\": url}\n@router.get(\"/callback\")\nasync def callback(code: Optional[str] = None, state: Optional[str] = None):\ntokens = await oauth.get_access_token(code=code, state=state)\nuser_json = oauth.get_userinfo(tokens[\"access_token\"])\n_user = self.user.create(\nopen_id=oauth.get_open_id(user_json=user_json), provider=oauth.provider)\nif self.get_user_by_authority(_user.authority) is None:\ntry:\nregister(self.db , _user)\nexcept Exception(\"Register failed\"):\npass\nreturn login(_user, self.secret, self.lifetime_second)\nreturn router\ndef get_user_by_authority(self, authority: str):\nreturn self.db.query(BaseUser).filter(BaseUser.authority == authority).first()\ndef login_required(self, func):\n@wraps(func)\nasync def wrapper(*args, **kwargs):\nauth_handler = AuthHandler(self.secret, self.lifetime_second)\ntoken = kwargs.get('authorization', False)\nif token :\nauthority = auth_handler.decode_access_token(token)\nif not self.get_user_by_authority(authority) :\nraise HTTPException(status_code=401, detail=\"user not exist\")\nelse:\nraise HTTPException(status_code=401, detail=\"token required\")\n# success\nreturn await func(*args, **kwargs)\nreturn wrapper\n</code></pre>"},{"location":"configuration/auth/authenticate/","title":"authenticate","text":""},{"location":"configuration/auth/login/","title":"Login","text":""},{"location":"configuration/auth/register/","title":"Register","text":""},{"location":"configuration/user/User/","title":"User","text":""},{"location":"configuration/user/User/#baseuser","title":"BaseUser","text":"<p><code>BaseUser</code> is a SQLAlchemy based model which represents a user in a database.</p> <ul> <li><code>id</code> : a UUID representing the unique identifier of a user.</li> <li><code>authority</code> : a SHA256 hash of the user's open_id and provider.</li> </ul> <pre><code>from pydantic import BaseModel, Field, constr\nfrom sqlalchemy import Column, String\nimport hashlib\nimport uuid\nclass BaseUser(Base):\n__tablename__ = \"User\"\nid = Column(String, primary_key=True, index=True)\nauthority = Column(String)\npayload = {\n}\ndef __init__(self, id, authority):\nself.id = id\nself.authority = authority\n@classmethod\ndef create_authority(cls, open_id, provider):\ncontext = str(open_id)+provider\nauthority = hashlib.sha256(context.encode()).hexdigest()\nreturn authority\n@classmethod\ndef create(\ncls,\nopen_id: String,\nprovider: String,\n):\nauthority = cls.create_authority(open_id, provider)\nid = uuid.uuid4().hex\nreturn cls(id=id, authority=authority)\nclass Config:\norm_mode = True\n</code></pre>"},{"location":"configuration/user/User/#customuser","title":"CustomUser","text":"<p><code>CustomUser</code> is a optional class which inherits <code>BaseUser</code>. If you want to add new columns or payload, you can write it as follows.</p> <pre><code>from fastapi_allauth.model import BaseUser\nfrom sqlalchemy import Column, String\nclass CustomUser(BaseUser):\n# defalut payload only has an ID\n# update your payload\npayload = {\n\"custom\": \"custom\"\n... \n}\n# If additional columns are needed, add them.\n</code></pre>"}]}