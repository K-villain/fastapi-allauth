{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to K-Villain FastAPI Allauth! \u00b6 K-villain FastAPI Allauth is based on SQLAlchemy, and designed to be cutomizable. It enables you to bring various oauth social login to your services. Docs : https://k-villain.github.io/fastapi-allauth Github : https://github.com/K-villain/fastapi-allauth Features \u00b6 Extensible base user model SQLAlchemy ORM based Cutomiazable User table Ready-to-use social oauth login flow Contributors \u00b6 sangham \ud83d\udea7 choisaywhy \ud83d\udea7","title":"Home"},{"location":"#welcome-to-k-villain-fastapi-allauth","text":"K-villain FastAPI Allauth is based on SQLAlchemy, and designed to be cutomizable. It enables you to bring various oauth social login to your services. Docs : https://k-villain.github.io/fastapi-allauth Github : https://github.com/K-villain/fastapi-allauth","title":"Welcome to K-Villain FastAPI Allauth!"},{"location":"#features","text":"Extensible base user model SQLAlchemy ORM based Cutomiazable User table Ready-to-use social oauth login flow","title":"Features"},{"location":"#contributors","text":"sangham \ud83d\udea7 choisaywhy \ud83d\udea7","title":"Contributors"},{"location":"installation/","text":"Getting started \u00b6 Installation \u00b6 First of all, you need to install fastapi-allauth. pip install fastapi-allauth Minimum Example \u00b6 Villain Fastapi Allauth provides several ready-to-use clients. Here is an example of google oauth to start with. app/models.py app/main.py from fastapi_allauth.model.BaseUser import BaseUser , Base class CustomUser ( BaseUser ): # defalut payload only has an ID # update your payload payload = { \"custom\" : \"custom\" ... } # If additional columns are needed, add them. from fastapi import FastAPI from fastapi import APIRouter from fastapi_allauth.oauth import GoogleOauth from fastapi_allauth import AllauthManager from db import engine , SessionLocal from models import CustomUser , Base Base . metadata . create_all ( bind = engine ) ... JWT_SECRET = 'your secret' allauthManager = AllauthManager ( db = get_db (), user = CustomUser , secret = JWT_SECRET , lifetime_second = 3600 ) googleOauth = GoogleOauth ( provider = \"GOOGLE\" , client_id = \"your client\" , client_secret = \"your secret\" , redirect_uri = \"http://localhost:8000/google/callback\" , scope = [ \"openid\" , \"email\" , \"profile\" ] ) app . include_router ( allauthManager . get_oauth_router ( googleOauth ), prefix = \"/google\" , tags = [ \"google\" ])","title":"Getting started"},{"location":"installation/#getting-started","text":"","title":"Getting started"},{"location":"installation/#installation","text":"First of all, you need to install fastapi-allauth. pip install fastapi-allauth","title":"Installation"},{"location":"installation/#minimum-example","text":"Villain Fastapi Allauth provides several ready-to-use clients. Here is an example of google oauth to start with. app/models.py app/main.py from fastapi_allauth.model.BaseUser import BaseUser , Base class CustomUser ( BaseUser ): # defalut payload only has an ID # update your payload payload = { \"custom\" : \"custom\" ... } # If additional columns are needed, add them. from fastapi import FastAPI from fastapi import APIRouter from fastapi_allauth.oauth import GoogleOauth from fastapi_allauth import AllauthManager from db import engine , SessionLocal from models import CustomUser , Base Base . metadata . create_all ( bind = engine ) ... JWT_SECRET = 'your secret' allauthManager = AllauthManager ( db = get_db (), user = CustomUser , secret = JWT_SECRET , lifetime_second = 3600 ) googleOauth = GoogleOauth ( provider = \"GOOGLE\" , client_id = \"your client\" , client_secret = \"your secret\" , redirect_uri = \"http://localhost:8000/google/callback\" , scope = [ \"openid\" , \"email\" , \"profile\" ] ) app . include_router ( allauthManager . get_oauth_router ( googleOauth ), prefix = \"/google\" , tags = [ \"google\" ])","title":"Minimum Example"},{"location":"license/","text":"License \u00b6 This project is licensed under the terms of the MIT license.","title":"License"},{"location":"license/#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"configuration/allauth-manager/","text":"Params \u00b6 allauth_manager takes in the following parameters in its constructor. db : a SQLAlchemy session object that is used for interacting with a database. user : a user object that inherits BaseUser . secret : a string that is used to encrypt and decrypt JSON web tokens (JWT). lifetime_second : an integer representing the lifetime in seconds of a token. Methods \u00b6 allauth_manager provides the following methods. get_oauth_router : a method that returns an instance of FastAPI's APIRouter with two endpoints, /authorize and /callback , for handling OAuth authorization and callback processes, respectively. /authorize Description : This endpoint is returns a JSON response containing authorization url Headers : Content-Type: application/json Request Body : scope: string Response Body : url: string (required) Response Status Codes : 200 OK: return url was successful 400 Bad Request: Required parameters are missing or invalid. Example Request : bashCopy codePOST /authorize Content-Type: application/json { \"scope\": \"email, birth\" } /callback Description : This endpoint is used for logging into the system. It returns a JSON response containing access and refresh tokens. Headers : Content-Type : application/json Request Body : - code: string (required) - state: string (required) Response Body : - access_token: string (required) - refresh_token: string (required) Response Status Codes : - 200 OK: Login was successful and access and refresh tokens are returned in the response. - 400 Bad Request: Required parameters are missing or invalid. - 401 Unauthorized: Incorrect email or password. Example Request : ``` bashCopy codePOST /login Content-Type: application/json { \"code\": \"code\", \"state\": \"state\" } ``` Example Response : ``` cssCopy codeHTTP/1.1 200 OK Content-Type: application/json { \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1ODk5MTk0MDUsImlhdCI6MTU4OTkxODkwNSwiZW1haWwiOiJleGFtcGxlQGdtYWlsLmNvbSJ9.iQ21xFyE0NlNlZ6Wxdu8UOhN1rLjKlFcNbLKj0vL-4I\", \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1OTA1MjQyMDUsImlhdCI6MTU4OTkxODkwNSwiZW1haWwiOiJleGFtcGxlQGdtYWlsLmNvbSJ9.NxL-yaCnS1SzfIgWU6BQik6DJj9PiYbZ6fmgW8pv068\", \"expires_in\": 86400 } ``` login_required : a decorator that checks if a user is logged in. If the user is not logged in or the token is invalid, it raises a HTTPException with status code 401. Code \u00b6 from typing import Optional from sqlalchemy.orm import Session from fastapi import APIRouter , HTTPException from fastapi.responses import RedirectResponse from oauth.BaseOauth import BaseOauth from auth import login , register , AuthHandler from model import BaseUser from functools import wraps class AllauthManager : db : Session user : BaseUser secret : str lifetime_second : int = 3600 def __init__ ( self , db , user , secret , lifetime_second ) -> None : self . db = db self . user = user self . secret = secret self . lifetime_second = lifetime_second def get_oauth_router ( self , oauth : BaseOauth ) -> APIRouter : router = APIRouter () @router . get ( \"/authorize\" ) async def authorize ( scope : Optional [ str ] = None ): url = await oauth . get_authorization_url ( scope = scope ) return { \"url\" : url } @router . get ( \"/callback\" ) async def callback ( code : Optional [ str ] = None , state : Optional [ str ] = None ): tokens = await oauth . get_access_token ( code = code , state = state ) user_json = oauth . get_userinfo ( tokens [ \"access_token\" ]) _user = self . user . create ( open_id = oauth . get_open_id ( user_json = user_json ), provider = oauth . provider ) if self . get_user_by_authority ( _user . authority ) is None : try : register ( self . db , _user ) except Exception ( \"Register failed\" ): pass return login ( _user , self . secret , self . lifetime_second ) return router def get_user_by_authority ( self , authority : str ): return self . db . query ( BaseUser ) . filter ( BaseUser . authority == authority ) . first () def login_required ( self , func ): @wraps ( func ) async def wrapper ( * args , ** kwargs ): auth_handler = AuthHandler ( self . secret , self . lifetime_second ) token = kwargs . get ( 'authorization' , False ) if token : authority = auth_handler . decode_access_token ( token ) if not self . get_user_by_authority ( authority ) : raise HTTPException ( status_code = 401 , detail = \"user not exist\" ) else : raise HTTPException ( status_code = 401 , detail = \"token required\" ) # success return await func ( * args , ** kwargs ) return wrapper","title":"Allauth manager"},{"location":"configuration/allauth-manager/#params","text":"allauth_manager takes in the following parameters in its constructor. db : a SQLAlchemy session object that is used for interacting with a database. user : a user object that inherits BaseUser . secret : a string that is used to encrypt and decrypt JSON web tokens (JWT). lifetime_second : an integer representing the lifetime in seconds of a token.","title":"Params"},{"location":"configuration/allauth-manager/#methods","text":"allauth_manager provides the following methods. get_oauth_router : a method that returns an instance of FastAPI's APIRouter with two endpoints, /authorize and /callback , for handling OAuth authorization and callback processes, respectively. /authorize Description : This endpoint is returns a JSON response containing authorization url Headers : Content-Type: application/json Request Body : scope: string Response Body : url: string (required) Response Status Codes : 200 OK: return url was successful 400 Bad Request: Required parameters are missing or invalid. Example Request : bashCopy codePOST /authorize Content-Type: application/json { \"scope\": \"email, birth\" } /callback Description : This endpoint is used for logging into the system. It returns a JSON response containing access and refresh tokens. Headers : Content-Type : application/json Request Body : - code: string (required) - state: string (required) Response Body : - access_token: string (required) - refresh_token: string (required) Response Status Codes : - 200 OK: Login was successful and access and refresh tokens are returned in the response. - 400 Bad Request: Required parameters are missing or invalid. - 401 Unauthorized: Incorrect email or password. Example Request : ``` bashCopy codePOST /login Content-Type: application/json { \"code\": \"code\", \"state\": \"state\" } ``` Example Response : ``` cssCopy codeHTTP/1.1 200 OK Content-Type: application/json { \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1ODk5MTk0MDUsImlhdCI6MTU4OTkxODkwNSwiZW1haWwiOiJleGFtcGxlQGdtYWlsLmNvbSJ9.iQ21xFyE0NlNlZ6Wxdu8UOhN1rLjKlFcNbLKj0vL-4I\", \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1OTA1MjQyMDUsImlhdCI6MTU4OTkxODkwNSwiZW1haWwiOiJleGFtcGxlQGdtYWlsLmNvbSJ9.NxL-yaCnS1SzfIgWU6BQik6DJj9PiYbZ6fmgW8pv068\", \"expires_in\": 86400 } ``` login_required : a decorator that checks if a user is logged in. If the user is not logged in or the token is invalid, it raises a HTTPException with status code 401.","title":"Methods"},{"location":"configuration/allauth-manager/#code","text":"from typing import Optional from sqlalchemy.orm import Session from fastapi import APIRouter , HTTPException from fastapi.responses import RedirectResponse from oauth.BaseOauth import BaseOauth from auth import login , register , AuthHandler from model import BaseUser from functools import wraps class AllauthManager : db : Session user : BaseUser secret : str lifetime_second : int = 3600 def __init__ ( self , db , user , secret , lifetime_second ) -> None : self . db = db self . user = user self . secret = secret self . lifetime_second = lifetime_second def get_oauth_router ( self , oauth : BaseOauth ) -> APIRouter : router = APIRouter () @router . get ( \"/authorize\" ) async def authorize ( scope : Optional [ str ] = None ): url = await oauth . get_authorization_url ( scope = scope ) return { \"url\" : url } @router . get ( \"/callback\" ) async def callback ( code : Optional [ str ] = None , state : Optional [ str ] = None ): tokens = await oauth . get_access_token ( code = code , state = state ) user_json = oauth . get_userinfo ( tokens [ \"access_token\" ]) _user = self . user . create ( open_id = oauth . get_open_id ( user_json = user_json ), provider = oauth . provider ) if self . get_user_by_authority ( _user . authority ) is None : try : register ( self . db , _user ) except Exception ( \"Register failed\" ): pass return login ( _user , self . secret , self . lifetime_second ) return router def get_user_by_authority ( self , authority : str ): return self . db . query ( BaseUser ) . filter ( BaseUser . authority == authority ) . first () def login_required ( self , func ): @wraps ( func ) async def wrapper ( * args , ** kwargs ): auth_handler = AuthHandler ( self . secret , self . lifetime_second ) token = kwargs . get ( 'authorization' , False ) if token : authority = auth_handler . decode_access_token ( token ) if not self . get_user_by_authority ( authority ) : raise HTTPException ( status_code = 401 , detail = \"user not exist\" ) else : raise HTTPException ( status_code = 401 , detail = \"token required\" ) # success return await func ( * args , ** kwargs ) return wrapper","title":"Code"},{"location":"configuration/model/","text":"","title":"Model"},{"location":"configuration/overview/","text":"","title":"Overview"},{"location":"configuration/auth/authenticate/","text":"authenticate \u00b6","title":"authenticate"},{"location":"configuration/auth/authenticate/#authenticate","text":"","title":"authenticate"},{"location":"configuration/auth/login/","text":"Login \u00b6","title":"Login"},{"location":"configuration/auth/login/#login","text":"","title":"Login"},{"location":"configuration/auth/register/","text":"Register \u00b6","title":"Register"},{"location":"configuration/auth/register/#register","text":"","title":"Register"},{"location":"configuration/oauth/BaseOauth/","text":"","title":"BaseOauth"},{"location":"configuration/oauth/DiscordOauth/","text":"","title":"DiscordOauth"},{"location":"configuration/oauth/FacebookOauth/","text":"","title":"FacebookOauth"},{"location":"configuration/oauth/GithubOauth/","text":"","title":"GithubOauth"},{"location":"configuration/oauth/GoogleOauth/","text":"","title":"GoogleOauth"},{"location":"configuration/oauth/KakaoOauth/","text":"","title":"KakaoOauth"},{"location":"configuration/oauth/NaverOauth/","text":"","title":"NaverOauth"},{"location":"configuration/user/User/","text":"User \u00b6 BaseUser \u00b6 BaseUser is a SQLAlchemy based model which represents a user in a database. id : a UUID representing the unique identifier of a user. authority : a SHA256 hash of the user's open_id and provider. from pydantic import BaseModel , Field , constr from sqlalchemy import Column , String import hashlib import uuid class BaseUser ( Base ): __tablename__ = \"User\" id = Column ( String , primary_key = True , index = True ) authority = Column ( String ) payload = { } def __init__ ( self , id , authority ): self . id = id self . authority = authority @classmethod def create_authority ( cls , open_id , provider ): context = str ( open_id ) + provider authority = hashlib . sha256 ( context . encode ()) . hexdigest () return authority @classmethod def create ( cls , open_id : String , provider : String , ): authority = cls . create_authority ( open_id , provider ) id = uuid . uuid4 () . hex return cls ( id = id , authority = authority ) class Config : orm_mode = True CustomUser \u00b6 CustomUser is a optional class which inherits BaseUser . If you want to add new columns or payload, you can write it as follows. from fastapi_allauth.model import BaseUser from sqlalchemy import Column , String class CustomUser ( BaseUser ): # defalut payload only has an ID # update your payload payload = { \"custom\" : \"custom\" ... } # If additional columns are needed, add them.","title":"User"},{"location":"configuration/user/User/#user","text":"","title":"User"},{"location":"configuration/user/User/#baseuser","text":"BaseUser is a SQLAlchemy based model which represents a user in a database. id : a UUID representing the unique identifier of a user. authority : a SHA256 hash of the user's open_id and provider. from pydantic import BaseModel , Field , constr from sqlalchemy import Column , String import hashlib import uuid class BaseUser ( Base ): __tablename__ = \"User\" id = Column ( String , primary_key = True , index = True ) authority = Column ( String ) payload = { } def __init__ ( self , id , authority ): self . id = id self . authority = authority @classmethod def create_authority ( cls , open_id , provider ): context = str ( open_id ) + provider authority = hashlib . sha256 ( context . encode ()) . hexdigest () return authority @classmethod def create ( cls , open_id : String , provider : String , ): authority = cls . create_authority ( open_id , provider ) id = uuid . uuid4 () . hex return cls ( id = id , authority = authority ) class Config : orm_mode = True","title":"BaseUser"},{"location":"configuration/user/User/#customuser","text":"CustomUser is a optional class which inherits BaseUser . If you want to add new columns or payload, you can write it as follows. from fastapi_allauth.model import BaseUser from sqlalchemy import Column , String class CustomUser ( BaseUser ): # defalut payload only has an ID # update your payload payload = { \"custom\" : \"custom\" ... } # If additional columns are needed, add them.","title":"CustomUser"}]}